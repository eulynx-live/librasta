name: CI

on:
  push:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install vcpkg and dependencies
      run: sudo apt-get install linux-libc-dev pkgconf && git submodule update --init && ./vcpkg/bootstrap-vcpkg.sh --disableMetrics

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_RASTA_GRPC_BRIDGE=ON -DENABLE_RASTA_TLS=ON -DENABLE_RASTA_OPAQUE=ON --preset vcpkg

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -v

    - name: Rcat UDP Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_udp.sh
      
    - name: Rcat TCP Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_tcp.sh

    - name: Rcat TLS Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_tls.sh

    - name: Rcat DTLS Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_dtls.sh

    - name: Rcat KEX / Opaque Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_kex.sh

    - name: CTest
      run: cd ${{github.workspace}}/build && ctest . --output-on-failure

    - name: Configure CMake without extensions
      # force full rebuild, but keep installed dependencies
      run: find ${{github.workspace}}/build | grep -v "vcpkg_installed" | xargs rm && cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_RASTA_GRPC_BRIDGE=ON -DENABLE_RASTA_TLS=ON --preset vcpkg

    - name: Build without extensions
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Rcat UDP Test without extensions
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_udp.sh
      
    - name: Rcat TCP Test without extensions
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_tcp.sh

    - name: Rcat TLS Test without extensions
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_tls.sh

    - name: Rcat DTLS Test without extensions
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_dtls.sh

    - name: CTest without extensions
      run: cd ${{github.workspace}}/build && ctest . --output-on-failure
