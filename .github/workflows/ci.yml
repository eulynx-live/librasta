name: CI

on:
  push:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install CUnit
      run: sudo apt-get install libcunit1 libcunit1-doc libcunit1-dev

    - name: Install libopaque dependencies
      run: sudo apt-get install libsodium-dev pkgconf

    - name: Install gRPC
      run: |
        sudo apt-get install build-essential autoconf libtool
        cd /tmp
        git clone --recurse-submodules -b v1.47.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc
        cd grpc
        mkdir -p cmake/build && cd cmake/build
        cmake ../.. -DgRPC_INSTALL=ON
        make -j8 && sudo make install
        cd / && rm -rf /tmp/grpc

    - name: Install WolfSSL
      run: |
        sudo apt-get install libtool autogen automake
        cd /tmp
        git clone --recurse-submodules -b v5.2.0-stable --depth 1 --shallow-submodules https://github.com/wolfssl/wolfssl
        cd wolfssl
        ./autogen.sh
        ./configure --enable-dtls --enable-debug --enable-certgen --enable-tls13 CFLAGS="-DHAVE_SECRET_CALLBACK" --enable-opensslextra
        make && sudo make install
        cd / && rm -rf /tmp/wolfssl

    - name: Set LD_LIBRARY_PATH
      run: echo "LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH):/usr/local/lib" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_RASTA_GRPC_BRIDGE=ON -DENABLE_RASTA_TLS=ON -DENABLE_RASTA_OPAQUE=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -v

    - name: Test
      run: cd ${{github.workspace}}/build && ctest .

    - name: UDP Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_udp.sh
      
    - name: TCP Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_tcp.sh

    - name: TLS Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_tls.sh

    - name: DTLS Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_dtls.sh

    - name: KEX / Opaque Test
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_kex.sh

    - name: Configure CMake without extensions
      # force full rebuild
      run: rm -r ${{github.workspace}}/build && cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_RASTA_GRPC_BRIDGE=ON -DENABLE_RASTA_TLS=ON

    - name: Build without extensions
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test without extensions
      run: cd ${{github.workspace}}/build && ctest .

    - name: UDP Test without extensions
      run: cd ${{github.workspace}} && ./examples/example_scripts/example_udp.sh